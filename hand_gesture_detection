#!/usr/bin/env python3
from ultralytics import YOLO
import rospy
from sensor_msgs.msg import CompressedImage
import cv2
from cv_bridge import CvBridge
from threading import Thread
from queue import Queue
import torch

# === Load and move YOLOv11 model to GPU ===
model = YOLO("simonsaysv1.pt")
model.to('cuda')  # Explicitly use Jetson GPU

# Confirm GPU usage
print("Torch version:", torch.__version__)
print("CUDA available:", torch.cuda.is_available())
print("Model is on device:", next(model.model.parameters()).device)

# === ROS Setup ===
subscriberNodeName = "camera_sensor_subscriber"
topicName = "video_topic/compressed"
bridgeObject = CvBridge()
frame_queue = Queue(maxsize=2)

# === Callback: Convert and queue frames ===
def callbackFunction(message):
    try:
        frame = bridgeObject.compressed_imgmsg_to_cv2(message, "bgr8")
        if frame is None:
            rospy.logwarn("‚ö†Ô∏è Frame conversion returned None")
            return
        resized_frame = cv2.resize(frame, (640, 480))
        if not frame_queue.full():
            frame_queue.put(resized_frame)
    except Exception as e:
        rospy.logerr(f"‚ùå Error converting frame: {e}")

# === Processing Thread: Run YOLO ===
def process_frames():
    while not rospy.is_shutdown():
        if not frame_queue.empty():
            frame = frame_queue.get()

            try:
                # Run inference
                results = model(frame)

                # Plot annotated frame
                annotated = results[0].plot()

                # Display output
                cv2.imshow("YOLOv11 - GPU Inference", annotated)
                cv2.waitKey(1)
            except Exception as e:
                rospy.logerr(f"‚ùå YOLO processing error: {e}")

# === Main Entry ===
if __name__ == "__main__":
    rospy.init_node(subscriberNodeName, anonymous=True)
    rospy.Subscriber(topicName, CompressedImage, callbackFunction, queue_size=1)

    # Start processing thread
    Thread(target=process_frames, daemon=True).start()

    try:
        rospy.spin()
    except KeyboardInterrupt:
        rospy.loginfo("üîª Shutting down node.")
    finally:
        cv2.destroyAllWindows()
